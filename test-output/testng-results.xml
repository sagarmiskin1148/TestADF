<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="7" passed="6" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2025-06-08T11:27:36 IST" name="Suite" finished-at="2025-06-08T11:30:06 IST" duration-ms="150424">
    <groups>
    </groups>
    <test started-at="2025-06-08T11:27:36 IST" name="Test" finished-at="2025-06-08T11:30:06 IST" duration-ms="150424">
      <class name="tests.LoginTests">
        <test-method is-config="true" signature="beforeSuite()[pri:0, instance:tests.LoginTests@38425407]" started-at="2025-06-08T11:27:35 IST" name="beforeSuite" finished-at="2025-06-08T11:27:36 IST" duration-ms="384" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeSuite -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.LoginTests@38425407]" started-at="2025-06-08T11:27:36 IST" name="beforeMethod" finished-at="2025-06-08T11:27:50 IST" duration-ms="14516" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.LoginTests.validateLoginUI()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="validateLoginUI()[pri:1, instance:tests.LoginTests@38425407]" started-at="2025-06-08T11:27:50 IST" name="validateLoginUI" description="Verify UI elements of the login page including labels, placeholders, and buttons" finished-at="2025-06-08T11:27:50 IST" duration-ms="115" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Incorrect label for username field expected [E-Mail Address] but found []]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Incorrect label for username field expected [E-Mail Address] but found []
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertEqualsImpl(Assert.java:150)
at org.testng.Assert.assertEquals(Assert.java:132)
at org.testng.Assert.assertEquals(Assert.java:656)
at tests.LoginTests.validateLoginUI(LoginTests.java:69)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:228)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:961)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:201)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:819)
at org.testng.TestRunner.run(TestRunner.java:619)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:437)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:397)
at org.testng.SuiteRunner.run(SuiteRunner.java:336)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1228)
at org.testng.TestNG.runSuites(TestNG.java:1134)
at org.testng.TestNG.run(TestNG.java:1101)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateLoginUI -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.LoginTests@38425407]" started-at="2025-06-08T11:27:50 IST" name="afterMethod" finished-at="2025-06-08T11:27:51 IST" duration-ms="709" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=validateLoginUI status=FAILURE method=LoginTests.validateLoginUI()[pri:1, instance:tests.LoginTests@38425407] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.LoginTests@38425407]" started-at="2025-06-08T11:27:51 IST" name="beforeMethod" finished-at="2025-06-08T11:28:00 IST" duration-ms="9002" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.LoginTests.validateLoginFormElementPositions()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="validateLoginFormElementPositions()[pri:2, instance:tests.LoginTests@38425407]" started-at="2025-06-08T11:28:00 IST" name="validateLoginFormElementPositions" description="Verify positions and visibility of login form elements" finished-at="2025-06-08T11:28:01 IST" duration-ms="469" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateLoginFormElementPositions -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.LoginTests@38425407]" started-at="2025-06-08T11:28:01 IST" name="afterMethod" finished-at="2025-06-08T11:28:01 IST" duration-ms="337" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=validateLoginFormElementPositions status=SUCCESS method=LoginTests.validateLoginFormElementPositions()[pri:2, instance:tests.LoginTests@38425407] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.LoginTests@38425407]" started-at="2025-06-08T11:28:01 IST" name="beforeMethod" finished-at="2025-06-08T11:28:18 IST" duration-ms="17056" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.LoginTests.loginWithBlankUsernameAndPassword()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="loginWithBlankUsernameAndPassword()[pri:3, instance:tests.LoginTests@38425407]" started-at="2025-06-08T11:28:18 IST" name="loginWithBlankUsernameAndPassword" description="Verify error when both username and password fields are left blank" finished-at="2025-06-08T11:28:19 IST" duration-ms="804" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginWithBlankUsernameAndPassword -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.LoginTests@38425407]" started-at="2025-06-08T11:28:19 IST" name="afterMethod" finished-at="2025-06-08T11:28:19 IST" duration-ms="365" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=loginWithBlankUsernameAndPassword status=SUCCESS method=LoginTests.loginWithBlankUsernameAndPassword()[pri:3, instance:tests.LoginTests@38425407] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.LoginTests@38425407]" started-at="2025-06-08T11:28:19 IST" name="beforeMethod" finished-at="2025-06-08T11:28:29 IST" duration-ms="10335" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.LoginTests.loginWithBlankEmailButFilledPassword() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="loginWithBlankEmailButFilledPassword()[pri:4, instance:tests.LoginTests@38425407]" started-at="2025-06-08T11:28:29 IST" name="loginWithBlankEmailButFilledPassword" description="Verify error messages when email is blank but password is filled" finished-at="2025-06-08T11:28:53 IST" duration-ms="23181" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginWithBlankEmailButFilledPassword -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.LoginTests@38425407]" started-at="2025-06-08T11:28:53 IST" name="afterMethod" finished-at="2025-06-08T11:28:53 IST" duration-ms="415" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=loginWithBlankEmailButFilledPassword status=SUCCESS method=LoginTests.loginWithBlankEmailButFilledPassword()[pri:4, instance:tests.LoginTests@38425407] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.LoginTests@38425407]" started-at="2025-06-08T11:28:53 IST" name="beforeMethod" finished-at="2025-06-08T11:29:02 IST" duration-ms="9250" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.LoginTests.loginWithBlankPasswordButFilledEmail() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="loginWithBlankPasswordButFilledEmail()[pri:5, instance:tests.LoginTests@38425407]" started-at="2025-06-08T11:29:02 IST" name="loginWithBlankPasswordButFilledEmail" description="Verify error messages when password is blank but email is filled" finished-at="2025-06-08T11:29:25 IST" duration-ms="23167" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginWithBlankPasswordButFilledEmail -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.LoginTests@38425407]" started-at="2025-06-08T11:29:25 IST" name="afterMethod" finished-at="2025-06-08T11:29:26 IST" duration-ms="399" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=loginWithBlankPasswordButFilledEmail status=SUCCESS method=LoginTests.loginWithBlankPasswordButFilledEmail()[pri:5, instance:tests.LoginTests@38425407] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.LoginTests@38425407]" started-at="2025-06-08T11:29:26 IST" name="beforeMethod" finished-at="2025-06-08T11:29:35 IST" duration-ms="9396" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.LoginTests.loginWithValidUsernameInvalidPassword()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="loginWithValidUsernameInvalidPassword()[pri:6, instance:tests.LoginTests@38425407]" started-at="2025-06-08T11:29:35 IST" name="loginWithValidUsernameInvalidPassword" description="Verify login fails with valid username and invalid password" finished-at="2025-06-08T11:29:37 IST" duration-ms="1878" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginWithValidUsernameInvalidPassword -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.LoginTests@38425407]" started-at="2025-06-08T11:29:37 IST" name="afterMethod" finished-at="2025-06-08T11:29:37 IST" duration-ms="320" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=loginWithValidUsernameInvalidPassword status=SUCCESS method=LoginTests.loginWithValidUsernameInvalidPassword()[pri:6, instance:tests.LoginTests@38425407] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.LoginTests@38425407]" started-at="2025-06-08T11:29:37 IST" name="beforeMethod" finished-at="2025-06-08T11:29:54 IST" duration-ms="16322" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.LoginTests.validateValidLogin() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="validateValidLogin()[pri:7, instance:tests.LoginTests@38425407]" started-at="2025-06-08T11:29:54 IST" name="validateValidLogin" description="Verify successful login with valid username and password" finished-at="2025-06-08T11:30:06 IST" duration-ms="11760" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateValidLogin -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.LoginTests@38425407]" started-at="2025-06-08T11:30:06 IST" name="afterMethod" finished-at="2025-06-08T11:30:06 IST" duration-ms="553" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=validateValidLogin status=SUCCESS method=LoginTests.validateValidLogin()[pri:7, instance:tests.LoginTests@38425407] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterSuite()[pri:0, instance:tests.LoginTests@38425407]" started-at="2025-06-08T11:30:06 IST" name="afterSuite" finished-at="2025-06-08T11:30:07 IST" duration-ms="369" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterSuite -->
      </class> <!-- tests.LoginTests -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
